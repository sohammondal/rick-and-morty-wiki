{"version":3,"sources":["pages/Character/Episodes/styles.ts","pages/Character/Episodes/index.tsx","pages/Character/styles.ts","pages/Character/Skeleton/index.tsx","pages/Character/index.tsx"],"names":["boxSx","width","height","bgcolor","listSx","overflow","padding","media","tabletPortrait","EpisodesList","episodes","length","Box","sx","Typography","variant","List","map","episode","index","isLastItem","ListItem","ListItemText","primary","display","component","color","id","name","secondary","air_date","Divider","modalSx","justifyContent","alignItems","closeIconSx","position","right","top","theme","palette","grey","ModalContent","styled","div","flexCol","hw","full","flexRow","flexColCenter","custom","tabletLandscape","half","desktop","CharInfo","errorSx","textAlign","CharacterModalSkeleton","charInfo","className","Skeleton","style","Object","keys","charInfoKey","Array","fill","_","Character","navigate","useNavigate","characterId","useParams","routerLocation","useLocation","dispatch","useAppDispatch","useAppSelector","state","character","origin","location","isLoading","error","useEffect","fetchCharacter","Number","status","String","species","gender","type","closeModal","resetState","Modal","open","onClose","Slide","in","direction","IconButton","onClick","src","image","alt","value"],"mappings":"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","file":"static/js/4.b8e1426c.chunk.js","sourcesContent":["import { media } from 'theme/common.styles'\n\nexport const boxSx = { width: '100%', height: '100%', bgcolor: 'background.paper' }\n\nexport const listSx = {\n  width: '100%',\n  height: '100%',\n  bgcolor: 'background.paper',\n  overflow: 'hidden scroll',\n  padding: '10px',\n  [media.tabletPortrait]: {\n    padding: '20px 0 5vh 0',\n  },\n}\n","import Box from '@mui/material/Box'\nimport Divider from '@mui/material/Divider'\nimport List from '@mui/material/List'\nimport ListItem from '@mui/material/ListItem'\nimport ListItemText from '@mui/material/ListItemText'\nimport Typography from '@mui/material/Typography'\nimport * as React from 'react'\nimport { Episode } from 'rickmortyapi/dist/interfaces'\n\nimport { boxSx, listSx } from './styles'\n\nexport const EpisodesList: React.FC<{ episodes: Episode[] }> = ({ episodes }) => {\n  if (!episodes.length) return null\n  return (\n    <Box sx={boxSx}>\n      <Typography variant='h4'>Episodes</Typography>\n      <List sx={listSx}>\n        {episodes?.map((episode, index) => {\n          const isLastItem = episodes.length - 1 === index\n          return (\n            <React.Fragment key={episode.id}>\n              <ListItem>\n                <ListItemText\n                  primary={\n                    <>\n                      <Typography\n                        sx={{ display: 'inline' }}\n                        component='span'\n                        variant='body2'\n                        color='text.secondary'\n                      >\n                        {episode.id}{' '}\n                      </Typography>\n                      {episode.name}\n                    </>\n                  }\n                  secondary={\n                    <React.Fragment>\n                      {' code '}\n                      <Typography\n                        sx={{ display: 'inline' }}\n                        component='span'\n                        variant='body2'\n                        color='text.primary'\n                      >\n                        {episode.episode}\n                      </Typography>\n                      {' â€¢ aired '}\n                      <Typography\n                        sx={{ display: 'inline' }}\n                        component='span'\n                        variant='body2'\n                        color='text.primary'\n                      >\n                        {episode.air_date}\n                      </Typography>\n                    </React.Fragment>\n                  }\n                />\n              </ListItem>\n              {!isLastItem && <Divider variant='middle' component='li' />}\n            </React.Fragment>\n          )\n        })}\n      </List>\n    </Box>\n  )\n}\n","import styled from '@emotion/styled'\nimport { SxProps, Theme } from '@mui/material'\n\nimport { flexCol, flexColCenter, flexRow, hw, media } from 'theme/common.styles'\n\nexport const modalSx: SxProps = { display: 'flex', justifyContent: 'center', alignItems: 'center' }\n\nexport const closeIconSx = {\n  position: 'absolute',\n  right: 8,\n  top: 8,\n  color: (theme: Theme): string => theme.palette.grey[500],\n}\n\nexport const ModalContent = styled.div`\n  width: 100vw;\n  height: 75vh;\n  padding: 50px 20px;\n  background-color: #fff;\n  border-radius: 4px;\n  ${flexCol}\n  overflow: auto;\n  position: relative;\n  align-self: end;\n\n  .character-information {\n    ${flexCol}\n    flex-basis: 60%;\n\n    img {\n      ${hw.full}\n      border-radius: 4px;\n    }\n  }\n  .character-episodes {\n    flex-basis: 40%;\n    overflow: unset;\n  }\n\n  ${media.tabletPortrait} {\n    width: 85vw;\n    height: 60vh;\n    padding: 25px;\n    ${flexRow}\n    overflow: unset;\n    align-self: center;\n\n    .character-information {\n      ${flexColCenter}\n      img {\n        ${hw.custom(50, '%', 75)}\n      }\n    }\n\n    .character-episodes {\n      overflow: hidden;\n    }\n  }\n\n  ${media.tabletLandscape} {\n    width: 70vw;\n    height: 65vh;\n\n    .character-information {\n      img {\n        ${hw.half}\n      }\n    }\n  }\n\n  ${media.desktop} {\n    width: 65vw;\n    height: 75vh;\n    padding: 25px;\n    ${flexRow}\n\n    .character-information {\n      img {\n        ${hw.half}\n      }\n    }\n\n    .character-episodes {\n      overflow: hidden;\n    }\n  }\n`\n\nexport const CharInfo = styled.div`\n  ${flexRow}\n  margin: 5px 0;\n  p:nth-of-type(1) {\n    width: 70px;\n  }\n\n  ${media.tabletPortrait} {\n    margin: 10px 0;\n  }\n`\n\nexport const errorSx: SxProps = {\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  textAlign: 'center',\n}\n","import Skeleton from '@mui/material/Skeleton'\nimport React from 'react'\n\nimport { CharInfo } from '../styles'\n\nexport const CharacterModalSkeleton: React.FC<{ charInfo: Record<string, string> }> = ({\n  charInfo,\n}) => (\n  <>\n    <div className='character-information'>\n      <Skeleton variant='rounded' component='img' />\n      <div style={{ width: '40%' }}>\n        {Object.keys(charInfo).map((charInfoKey) => {\n          return (\n            <CharInfo key={charInfoKey}>\n              <Skeleton variant='text' component='div' width='100%' />\n            </CharInfo>\n          )\n        })}\n      </div>\n    </div>\n    <div className='character-episodes'>\n      {Array(10)\n        .fill(null)\n        .map((_, index) => (\n          <Skeleton\n            key={`episode-skeletion-${index}`}\n            variant='text'\n            component='div'\n            width='100%'\n            height={50}\n          />\n        ))}\n    </div>\n  </>\n)\n","import CloseIcon from '@mui/icons-material/Close'\nimport IconButton from '@mui/material/IconButton'\nimport Modal from '@mui/material/Modal'\nimport Slide from '@mui/material/Slide'\nimport Typography from '@mui/material/Typography'\nimport React, { useEffect } from 'react'\nimport { useNavigate, useParams, useLocation } from 'react-router-dom'\n\nimport { useAppDispatch, useAppSelector } from 'store/hooks'\nimport { fetchCharacter, resetState } from 'store/reducers/character'\n\nimport { EpisodesList } from './Episodes'\nimport { CharacterModalSkeleton } from './Skeleton'\nimport { CharInfo, closeIconSx, ModalContent, modalSx, errorSx } from './styles'\n\nexport const Character: React.FC = () => {\n  const navigate = useNavigate()\n  const { characterId } = useParams()\n  const routerLocation = useLocation()\n  const dispatch = useAppDispatch()\n\n  const { character, episodes, origin, location, isLoading, error } = useAppSelector(\n    (state) => state.character,\n  )\n\n  useEffect(() => {\n    if (!characterId) return navigate('/')\n\n    dispatch(\n      fetchCharacter({\n        character: Number(characterId),\n        ...(routerLocation?.state || {}),\n      }),\n    )\n  }, [routerLocation, characterId])\n\n  const charInfo: Record<string, string> = {\n    name: character.name,\n    status: String(character.status),\n    species: character.species,\n    gender: String(character.gender),\n    type: character.type,\n    origin: `${origin?.name || 'unknown'} ${origin?.type ? ` â€¢ ${origin.type}` : ''}`,\n    location: `${location?.name || 'unknown'} ${location?.type ? ` â€¢ ${location.type}` : ''}`,\n    episodes: String(episodes.length),\n  }\n\n  const closeModal = () => {\n    dispatch(resetState())\n    navigate('/')\n  }\n\n  return (\n    <Modal open sx={modalSx} onClose={closeModal} data-testid='character-modal'>\n      <Slide in direction='up'>\n        <ModalContent>\n          {!isLoading && (\n            <IconButton aria-label='close' onClick={closeModal} sx={closeIconSx}>\n              <CloseIcon />\n            </IconButton>\n          )}\n          {isLoading && <CharacterModalSkeleton charInfo={charInfo} />}\n          {error && (\n            <Typography variant='h3' component='div' sx={errorSx}>\n              {error}\n            </Typography>\n          )}\n          {!isLoading && !error && (\n            <>\n              <div className='character-information'>\n                <img src={character?.image} alt={character.name} />\n                <div>\n                  {Object.keys(charInfo).map((charInfoKey) => {\n                    const value = charInfo[charInfoKey] || 'unknown'\n                    return (\n                      <CharInfo key={charInfoKey}>\n                        <Typography variant='body2' color='text.secondary'>\n                          {charInfoKey}\n                        </Typography>\n                        <Typography variant='body1' color='text.primary'>\n                          {value}\n                        </Typography>\n                      </CharInfo>\n                    )\n                  })}\n                </div>\n              </div>\n              <div className='character-episodes'>\n                <EpisodesList episodes={episodes} />\n              </div>\n            </>\n          )}\n        </ModalContent>\n      </Slide>\n    </Modal>\n  )\n}\n"],"sourceRoot":""}