{"version":3,"sources":["pages/Character/Episodes/styles.ts","pages/Character/Episodes/index.tsx","pages/Character/styles.ts","pages/Character/Skeleton/index.tsx","pages/Character/index.tsx"],"names":["boxSx","width","height","bgcolor","listSx","overflow","padding","media","tabletPortrait","EpisodesList","_ref","episodes","length","_jsxs","Box","sx","children","_jsx","Typography","variant","List","map","episode","index","isLastItem","React","ListItem","ListItemText","primary","_Fragment","display","component","color","id","name","secondary","air_date","Divider","modalSx","justifyContent","alignItems","closeIconSx","position","right","top","theme","palette","grey","zIndex","ModalContent","styled","div","_templateObject","_taggedTemplateLiteral","flexCol","hw","full","flexRow","flexColCenter","custom","tabletLandscape","half","desktop","CharInfo","_templateObject2","errorSx","textAlign","CharacterModalSkeleton","charInfo","className","Skeleton","style","Object","keys","charInfoKey","Array","fill","_","concat","Character","navigate","useNavigate","characterId","useParams","routerLocation","useLocation","dispatch","useAppDispatch","character","origin","location","isLoading","error","useAppSelector","state","useEffect","fetchCharacter","Number","status","String","species","gender","type","closeModal","characterSliceActions","resetState","Modal","open","onClose","Slide","in","direction","IconButton","onClick","CloseIcon","src","image","alt","value"],"mappings":"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","file":"static/js/4.ea27b66b.chunk.js","sourcesContent":["import { media } from 'theme/common.styles'\n\nexport const boxSx = { width: '100%', height: '100%', bgcolor: 'background.paper' }\n\nexport const listSx = {\n  width: '100%',\n  height: '100%',\n  bgcolor: 'background.paper',\n  overflow: 'hidden scroll',\n  padding: '10px',\n  [media.tabletPortrait]: {\n    padding: '20px 0 5vh 0',\n  },\n}\n","import Box from '@mui/material/Box'\nimport Divider from '@mui/material/Divider'\nimport List from '@mui/material/List'\nimport ListItem from '@mui/material/ListItem'\nimport ListItemText from '@mui/material/ListItemText'\nimport Typography from '@mui/material/Typography'\nimport * as React from 'react'\nimport { Episode } from 'rickmortyapi/dist/interfaces'\n\nimport { boxSx, listSx } from './styles'\n\nexport const EpisodesList: React.FC<{ episodes: Episode[] }> = ({ episodes }) => {\n  if (!episodes.length) return null\n  return (\n    <Box sx={boxSx}>\n      <Typography variant='h4'>Episodes</Typography>\n      <List sx={listSx}>\n        {episodes?.map((episode, index) => {\n          const isLastItem = episodes.length - 1 === index\n          return (\n            <React.Fragment key={episode.id}>\n              <ListItem>\n                <ListItemText\n                  primary={\n                    <>\n                      <Typography\n                        sx={{ display: 'inline' }}\n                        component='span'\n                        variant='body2'\n                        color='text.secondary'\n                      >\n                        {episode.id}{' '}\n                      </Typography>\n                      {episode.name}\n                    </>\n                  }\n                  secondary={\n                    <React.Fragment>\n                      {' code '}\n                      <Typography\n                        sx={{ display: 'inline' }}\n                        component='span'\n                        variant='body2'\n                        color='text.primary'\n                      >\n                        {episode.episode}\n                      </Typography>\n                      {' â€¢ aired '}\n                      <Typography\n                        sx={{ display: 'inline' }}\n                        component='span'\n                        variant='body2'\n                        color='text.primary'\n                      >\n                        {episode.air_date}\n                      </Typography>\n                    </React.Fragment>\n                  }\n                />\n              </ListItem>\n              {!isLastItem && <Divider variant='middle' component='li' />}\n            </React.Fragment>\n          )\n        })}\n      </List>\n    </Box>\n  )\n}\n","import styled from '@emotion/styled'\nimport { SxProps, Theme } from '@mui/material'\n\nimport { flexCol, flexColCenter, flexRow, hw, media } from 'theme/common.styles'\n\nexport const modalSx: SxProps = { display: 'flex', justifyContent: 'center', alignItems: 'center' }\n\nexport const closeIconSx = {\n  position: 'absolute',\n  right: 8,\n  top: 8,\n  color: (theme: Theme): string => theme.palette.grey[500],\n  zIndex: 1,\n}\n\nexport const ModalContent = styled.div`\n  width: 100vw;\n  height: 75vh;\n  padding: 50px 20px;\n  background-color: #fff;\n  border-radius: 4px;\n  ${flexCol}\n  overflow: auto;\n  position: relative;\n  align-self: end;\n\n  .character-information {\n    ${flexCol}\n    flex-basis: 60%;\n\n    img {\n      ${hw.full}\n      border-radius: 4px;\n    }\n  }\n  .character-episodes {\n    flex-basis: 40%;\n    overflow: unset;\n  }\n\n  ${media.tabletPortrait} {\n    width: 85vw;\n    height: 60vh;\n    padding: 25px;\n    ${flexRow}\n    overflow: unset;\n    align-self: center;\n\n    .character-information {\n      ${flexColCenter}\n      img {\n        ${hw.custom(50, '%', 75)}\n      }\n    }\n\n    .character-episodes {\n      overflow: hidden;\n    }\n  }\n\n  ${media.tabletLandscape} {\n    width: 70vw;\n    height: 65vh;\n\n    .character-information {\n      img {\n        ${hw.half}\n      }\n    }\n  }\n\n  ${media.desktop} {\n    width: 65vw;\n    height: 75vh;\n    padding: 25px;\n    ${flexRow}\n\n    .character-information {\n      img {\n        ${hw.half}\n      }\n    }\n\n    .character-episodes {\n      overflow: hidden;\n    }\n  }\n`\n\nexport const CharInfo = styled.div`\n  ${flexRow}\n  margin: 5px 0;\n  p:nth-of-type(1) {\n    width: 70px;\n  }\n\n  ${media.tabletPortrait} {\n    margin: 10px 0;\n  }\n`\n\nexport const errorSx: SxProps = {\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  textAlign: 'center',\n}\n","import Skeleton from '@mui/material/Skeleton'\nimport React from 'react'\n\nimport { CharInfo } from '../styles'\n\nexport const CharacterModalSkeleton: React.FC<{ charInfo: Record<string, string> }> = ({\n  charInfo,\n}) => (\n  <>\n    <div className='character-information'>\n      <Skeleton variant='rounded' component='img' />\n      <div style={{ width: '40%' }}>\n        {Object.keys(charInfo).map((charInfoKey) => {\n          return (\n            <CharInfo key={charInfoKey}>\n              <Skeleton variant='text' component='div' width='100%' />\n            </CharInfo>\n          )\n        })}\n      </div>\n    </div>\n    <div className='character-episodes'>\n      {Array(10)\n        .fill(null)\n        .map((_, index) => (\n          <Skeleton\n            key={`episode-skeletion-${index}`}\n            variant='text'\n            component='div'\n            width='100%'\n            height={50}\n          />\n        ))}\n    </div>\n  </>\n)\n","import CloseIcon from '@mui/icons-material/Close'\nimport IconButton from '@mui/material/IconButton'\nimport Modal from '@mui/material/Modal'\nimport Slide from '@mui/material/Slide'\nimport Typography from '@mui/material/Typography'\nimport React, { useEffect } from 'react'\nimport { useNavigate, useParams, useLocation } from 'react-router-dom'\n\nimport { useAppDispatch, useAppSelector } from 'store/hooks'\nimport { fetchCharacter, characterSliceActions } from 'store/reducers/character'\n\nimport { EpisodesList } from './Episodes'\nimport { CharacterModalSkeleton } from './Skeleton'\nimport { CharInfo, closeIconSx, ModalContent, modalSx, errorSx } from './styles'\n\nexport const Character: React.FC = () => {\n  const navigate = useNavigate()\n  const { characterId } = useParams()\n  const routerLocation = useLocation()\n  const dispatch = useAppDispatch()\n\n  const { character, episodes, origin, location, isLoading, error } = useAppSelector(\n    (state) => state.character,\n  )\n\n  useEffect(() => {\n    if (!characterId) return navigate('/')\n\n    dispatch(\n      fetchCharacter({\n        character: Number(characterId),\n        ...(routerLocation?.state || {}),\n      }),\n    )\n  }, [routerLocation, characterId])\n\n  const charInfo: Record<string, string> = {\n    name: character.name,\n    status: String(character.status),\n    species: character.species,\n    gender: String(character.gender),\n    type: character.type,\n    origin: `${origin?.name || 'unknown'} ${origin?.type ? ` â€¢ ${origin.type}` : ''}`,\n    location: `${location?.name || 'unknown'} ${location?.type ? ` â€¢ ${location.type}` : ''}`,\n    episodes: String(episodes.length),\n  }\n\n  const closeModal = () => {\n    dispatch(characterSliceActions.resetState())\n    navigate('/')\n  }\n\n  return (\n    <Modal open sx={modalSx} onClose={closeModal} data-testid='character-modal'>\n      <Slide in direction='up'>\n        <ModalContent>\n          {!isLoading && (\n            <IconButton aria-label='close' onClick={closeModal} sx={closeIconSx}>\n              <CloseIcon />\n            </IconButton>\n          )}\n          {isLoading && <CharacterModalSkeleton charInfo={charInfo} />}\n          {error && (\n            <Typography variant='h3' component='div' sx={errorSx}>\n              {error}\n            </Typography>\n          )}\n          {!isLoading && !error && (\n            <>\n              <div className='character-information'>\n                <img src={character?.image} alt={character.name} />\n                <div>\n                  {Object.keys(charInfo).map((charInfoKey) => {\n                    const value = charInfo[charInfoKey] || 'unknown'\n                    return (\n                      <CharInfo key={charInfoKey}>\n                        <Typography variant='body2' color='text.secondary'>\n                          {charInfoKey}\n                        </Typography>\n                        <Typography variant='body1' color='text.primary'>\n                          {value}\n                        </Typography>\n                      </CharInfo>\n                    )\n                  })}\n                </div>\n              </div>\n              <div className='character-episodes'>\n                <EpisodesList episodes={episodes} />\n              </div>\n            </>\n          )}\n        </ModalContent>\n      </Slide>\n    </Modal>\n  )\n}\n"],"sourceRoot":""}